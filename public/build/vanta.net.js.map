{"version":3,"file":"vanta.net.js","sources":["../../node_modules/vanta/src/vanta.net.js"],"sourcesContent":["import VantaBase, {VANTA} from './_base.js'\r\nimport {rn, ri, mobileCheck, getBrightness} from './helpers.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nclass Effect extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      color: 0xff3f81,\r\n      backgroundColor: 0x23153c,\r\n      points: 10,\r\n      maxDistance: 20,\r\n      spacing: 15,\r\n      showDots: true\r\n    }\r\n  }\r\n\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  // onInit() {\r\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n  //   this.material = new THREE.MeshLambertMaterial({\r\n  //     color: this.options.color,\r\n  //     emissive: this.options.color,\r\n  //     emissiveIntensity: 0.75\r\n  //   });\r\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\r\n  //   this.scene.add(this.cube);\r\n\r\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\r\n  //   c.position.z = 30;\r\n  //   c.lookAt(0,0,0);\r\n  //   this.scene.add(c);\r\n\r\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\r\n  //   this.scene.add(light);\r\n  // }\r\n\r\n  // onUpdate() {\r\n  //   this.cube.rotation.x += 0.01;\r\n  //   this.cube.rotation.y += 0.01;\r\n  // }\r\n\r\n  genPoint(x, y, z) {\r\n    let sphere\r\n    if (!this.points) { this.points = [] }\r\n    if (this.options.showDots) {\r\n      const geometry = new THREE.SphereGeometry( 0.25, 12, 12 ) // radius, width, height\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: this.options.color})\r\n      sphere = new THREE.Mesh( geometry, material )\r\n    } else {\r\n      sphere = new THREE.Object3D()\r\n    }\r\n    this.cont.add( sphere )\r\n    sphere.ox = x\r\n    sphere.oy = y\r\n    sphere.oz = z\r\n    sphere.position.set(x,y,z)\r\n    sphere.r = rn(-2,2) // rotation rate\r\n    return this.points.push(sphere)\r\n  }\r\n\r\n  onInit() {\r\n    this.cont = new THREE.Group()\r\n    this.cont.position.set(0,0,0)\r\n    this.scene.add(this.cont)\r\n\r\n    let n = this.options.points\r\n    let { spacing } = this.options\r\n    if (mobileCheck()) {\r\n      n = ~~(n * 0.75)\r\n      spacing = ~~(spacing * 0.65)\r\n    }\r\n\r\n    const numPoints = n * n * 2\r\n    this.linePositions = new Float32Array( numPoints * numPoints * 3 )\r\n    this.lineColors = new Float32Array( numPoints * numPoints * 3 )\r\n\r\n    const colorB = getBrightness(new THREE.Color(this.options.color))\r\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor))\r\n    this.blending =  colorB > bgB ? 'additive' : 'subtractive'\r\n\r\n    const geometry = new THREE.BufferGeometry()\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.computeBoundingSphere()\r\n    geometry.setDrawRange( 0, 0 )\r\n    const material = new THREE.LineBasicMaterial({\r\n      vertexColors: THREE.VertexColors,\r\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\r\n      // blending: THREE.SubtractiveBlending\r\n      transparent: true\r\n    })\r\n      // blending: THREE.CustomBlending\r\n      // blendEquation: THREE.SubtractEquation\r\n      // blendSrc: THREE.SrcAlphaFactor\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor\r\n\r\n    this.linesMesh = new THREE.LineSegments( geometry, material )\r\n    this.cont.add( this.linesMesh )\r\n\r\n    for (let i = 0; i<=n; i++) {\r\n      for (let j = 0; j<=n; j++) {\r\n        const y = ri(-3, 3)\r\n        const x = ((i - (n/2)) * spacing) + ri(-5,5)\r\n        let z = ((j - (n/2)) * spacing) + ri(-5,5)\r\n        if (i % 2) { z += spacing * 0.5 } // offset\r\n\r\n        // nexusX = Math.round(x / 20) * 20\r\n        // nexusZ = Math.round(z / 20) * 20\r\n        // x += (nexusX - x) * 0.01\r\n        // z += (nexusZ - z) * 0.01\r\n        this.genPoint(x, y - ri(5, 15), z)\r\n        this.genPoint(x + ri(-5,5), y + ri(5, 15), z + ri(-5,5))\r\n      }\r\n    }\r\n\r\n      //  # radius\r\n      //   width, # width\r\n      //   rn(0,1000), # startAng\r\n      //   rn(1,6), # ang\r\n      //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\r\n      //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\r\n      // )\r\n\r\n    // PerspectiveCamera( fov, aspect, near, far )\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      25,\r\n      this.width / this.height,\r\n      0.01, 10000)\r\n    this.camera.position.set(50, 100, 150)\r\n    this.scene.add( this.camera )\r\n\r\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\r\n    // @scene.add(ambience)\r\n\r\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\r\n    // @pointLight.position.set(0, 150, 200)\r\n    // @scene.add( @pointLight )\r\n\r\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75)\r\n    this.scene.add(ambience)\r\n\r\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1)\r\n    this.spot.position.set(0, 200, 0)\r\n    this.spot.distance = 400\r\n    this.spot.target = this.cont\r\n    return this.scene.add(this.spot)\r\n  }\r\n\r\n  onDestroy() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.spot = this.points = this.linesMesh = this.lineColors = this.linePositions = null\r\n  }\r\n\r\n  setOptions(userOptions) { // allow setOptions to change point colors\r\n    super.setOptions(userOptions)\r\n    if (userOptions.color) {\r\n      this.points.forEach(p => {\r\n        p.material.color = new THREE.Color(userOptions.color)\r\n      })\r\n    }\r\n  }\r\n\r\n  onUpdate() {\r\n    let diff, t\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    c.lookAt( new THREE.Vector3( 0, 0, 0 ) )\r\n    // c.near = 0.01\r\n    // c.updateProjectionMatrix()\r\n\r\n    let vertexpos = 0\r\n    let colorpos = 0\r\n    let numConnected = 0\r\n\r\n    const bgColor = new THREE.Color(this.options.backgroundColor)\r\n    const color = new THREE.Color(this.options.color)\r\n    const diffColor = color.clone().sub(bgColor)\r\n\r\n    if (this.rayCaster) {\r\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX,this.rcMouseY), this.camera);\r\n    }\r\n\r\n    // # TEMPORARY RAY DRAWING\r\n    // pointA = @camera.position\r\n    // direction = @rayCaster.ray.direction\r\n    // direction.normalize()\r\n    // distance = 1000000 # at what distance to determine pointB\r\n    // pointB = new THREE.Vector3()\r\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\r\n    // geometry = new THREE.Geometry()\r\n    // geometry.vertices.push( pointA )\r\n    // geometry.vertices.push( pointB )\r\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\r\n    // line = new THREE.Line( geometry, material )\r\n    // @scene.add( line )\r\n\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      let dist, distToMouse\r\n      const p = this.points[i]\r\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\r\n\r\n      if (this.rayCaster) {\r\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position)\r\n      } else {\r\n        distToMouse = 1000\r\n      }\r\n      const distClamp = distToMouse.clamp(5,15)\r\n      p.scale.x = (p.scale.y = (p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100)))\r\n\r\n      if (p.r !== 0) {\r\n        let ang = Math.atan2( p.position.z, p.position.x )\r\n        dist = Math.sqrt( (p.position.z * p.position.z) + (p.position.x * p.position.x) )\r\n        ang += 0.00025 * p.r\r\n        p.position.x = dist * Math.cos(ang)\r\n        p.position.z = dist * Math.sin(ang)\r\n      }\r\n        // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\r\n        // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\r\n\r\n      for (let j = i; j < this.points.length; j++) {\r\n        const p2 = this.points[j]\r\n        const dx = p.position.x - p2.position.x\r\n        const dy = p.position.y - p2.position.y\r\n        const dz = p.position.z - p2.position.z\r\n        dist = Math.sqrt( (dx * dx) + (dy * dy) + (dz * dz) )\r\n        if (dist < this.options.maxDistance) {\r\n          let lineColor\r\n          const alpha = (( 1.0 - (dist / this.options.maxDistance) ) * 2).clamp(0, 1)\r\n          if (this.blending === 'additive') {\r\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n          } else {\r\n            lineColor = bgColor.clone().lerp(color, alpha)\r\n          }\r\n          // if @blending == 'subtractive'\r\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n\r\n          this.linePositions[ vertexpos++ ] = p.position.x\r\n          this.linePositions[ vertexpos++ ] = p.position.y\r\n          this.linePositions[ vertexpos++ ] = p.position.z\r\n          this.linePositions[ vertexpos++ ] = p2.position.x\r\n          this.linePositions[ vertexpos++ ] = p2.position.y\r\n          this.linePositions[ vertexpos++ ] = p2.position.z\r\n\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n\r\n          numConnected++\r\n        }\r\n      }\r\n    }\r\n    this.linesMesh.geometry.setDrawRange( 0, numConnected * 2 )\r\n    this.linesMesh.geometry.attributes.position.needsUpdate = true\r\n    this.linesMesh.geometry.attributes.color.needsUpdate = true\r\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\r\n\r\n    return this.t * 0.001\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera\r\n    if (!c.oy) {\r\n      c.oy = c.position.y\r\n      c.ox = c.position.x\r\n      c.oz = c.position.z\r\n    }\r\n    const ang = Math.atan2(c.oz, c.ox)\r\n    const dist = Math.sqrt((c.oz*c.oz) + (c.ox*c.ox))\r\n    const tAng = ang + ((x-0.5) * 2 * (this.options.mouseCoeffX || 1))\r\n    c.tz = dist * Math.sin(tAng)\r\n    c.tx = dist * Math.cos(tAng)\r\n    c.ty = c.oy + ((y-0.5) * 50 * (this.options.mouseCoeffY || 1))\r\n\r\n    if (!this.rayCaster) {\r\n      // this.rayCaster = new THREE.Raycaster()\r\n    }\r\n    this.rcMouseX = (x * 2) - 1\r\n    this.rcMouseY = (- x * 2) + 1\r\n  }\r\n\r\n  onRestart() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.points = []\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('NET', Effect)"],"names":[],"mappings":"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"}