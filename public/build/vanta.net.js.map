{"version":3,"file":"vanta.net.js","sources":["../../node_modules/vanta/src/vanta.net.js"],"sourcesContent":["import VantaBase, {VANTA} from './_base.js'\r\nimport {rn, ri, mobileCheck, getBrightness} from './helpers.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nclass Effect extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      color: 0xff3f81,\r\n      backgroundColor: 0x23153c,\r\n      points: 10,\r\n      maxDistance: 20,\r\n      spacing: 15,\r\n      showDots: true\r\n    }\r\n  }\r\n\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  // onInit() {\r\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n  //   this.material = new THREE.MeshLambertMaterial({\r\n  //     color: this.options.color,\r\n  //     emissive: this.options.color,\r\n  //     emissiveIntensity: 0.75\r\n  //   });\r\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\r\n  //   this.scene.add(this.cube);\r\n\r\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\r\n  //   c.position.z = 30;\r\n  //   c.lookAt(0,0,0);\r\n  //   this.scene.add(c);\r\n\r\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\r\n  //   this.scene.add(light);\r\n  // }\r\n\r\n  // onUpdate() {\r\n  //   this.cube.rotation.x += 0.01;\r\n  //   this.cube.rotation.y += 0.01;\r\n  // }\r\n\r\n  genPoint(x, y, z) {\r\n    let sphere\r\n    if (!this.points) { this.points = [] }\r\n    if (this.options.showDots) {\r\n      const geometry = new THREE.SphereGeometry( 0.25, 12, 12 ) // radius, width, height\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: this.options.color})\r\n      sphere = new THREE.Mesh( geometry, material )\r\n    } else {\r\n      sphere = new THREE.Object3D()\r\n    }\r\n    this.cont.add( sphere )\r\n    sphere.ox = x\r\n    sphere.oy = y\r\n    sphere.oz = z\r\n    sphere.position.set(x,y,z)\r\n    sphere.r = rn(-2,2) // rotation rate\r\n    return this.points.push(sphere)\r\n  }\r\n\r\n  onInit() {\r\n    this.cont = new THREE.Group()\r\n    this.cont.position.set(0,0,0)\r\n    this.scene.add(this.cont)\r\n\r\n    let n = this.options.points\r\n    let { spacing } = this.options\r\n    if (mobileCheck()) {\r\n      n = ~~(n * 0.75)\r\n      spacing = ~~(spacing * 0.65)\r\n    }\r\n\r\n    const numPoints = n * n * 2\r\n    this.linePositions = new Float32Array( numPoints * numPoints * 3 )\r\n    this.lineColors = new Float32Array( numPoints * numPoints * 3 )\r\n\r\n    const colorB = getBrightness(new THREE.Color(this.options.color))\r\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor))\r\n    this.blending =  colorB > bgB ? 'additive' : 'subtractive'\r\n\r\n    const geometry = new THREE.BufferGeometry()\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.computeBoundingSphere()\r\n    geometry.setDrawRange( 0, 0 )\r\n    const material = new THREE.LineBasicMaterial({\r\n      vertexColors: THREE.VertexColors,\r\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\r\n      // blending: THREE.SubtractiveBlending\r\n      transparent: true\r\n    })\r\n      // blending: THREE.CustomBlending\r\n      // blendEquation: THREE.SubtractEquation\r\n      // blendSrc: THREE.SrcAlphaFactor\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor\r\n\r\n    this.linesMesh = new THREE.LineSegments( geometry, material )\r\n    this.cont.add( this.linesMesh )\r\n\r\n    for (let i = 0; i<=n; i++) {\r\n      for (let j = 0; j<=n; j++) {\r\n        const y = ri(-3, 3)\r\n        const x = ((i - (n/2)) * spacing) + ri(-5,5)\r\n        let z = ((j - (n/2)) * spacing) + ri(-5,5)\r\n        if (i % 2) { z += spacing * 0.5 } // offset\r\n\r\n        // nexusX = Math.round(x / 20) * 20\r\n        // nexusZ = Math.round(z / 20) * 20\r\n        // x += (nexusX - x) * 0.01\r\n        // z += (nexusZ - z) * 0.01\r\n        this.genPoint(x, y - ri(5, 15), z)\r\n        this.genPoint(x + ri(-5,5), y + ri(5, 15), z + ri(-5,5))\r\n      }\r\n    }\r\n\r\n      //  # radius\r\n      //   width, # width\r\n      //   rn(0,1000), # startAng\r\n      //   rn(1,6), # ang\r\n      //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\r\n      //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\r\n      // )\r\n\r\n    // PerspectiveCamera( fov, aspect, near, far )\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      25,\r\n      this.width / this.height,\r\n      0.01, 10000)\r\n    this.camera.position.set(50, 100, 150)\r\n    this.scene.add( this.camera )\r\n\r\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\r\n    // @scene.add(ambience)\r\n\r\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\r\n    // @pointLight.position.set(0, 150, 200)\r\n    // @scene.add( @pointLight )\r\n\r\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75)\r\n    this.scene.add(ambience)\r\n\r\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1)\r\n    this.spot.position.set(0, 200, 0)\r\n    this.spot.distance = 400\r\n    this.spot.target = this.cont\r\n    return this.scene.add(this.spot)\r\n  }\r\n\r\n  onDestroy() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.spot = this.points = this.linesMesh = this.lineColors = this.linePositions = null\r\n  }\r\n\r\n  setOptions(userOptions) { // allow setOptions to change point colors\r\n    super.setOptions(userOptions)\r\n    if (userOptions.color) {\r\n      this.points.forEach(p => {\r\n        p.material.color = new THREE.Color(userOptions.color)\r\n      })\r\n    }\r\n  }\r\n\r\n  onUpdate() {\r\n    let diff, t\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    c.lookAt( new THREE.Vector3( 0, 0, 0 ) )\r\n    // c.near = 0.01\r\n    // c.updateProjectionMatrix()\r\n\r\n    let vertexpos = 0\r\n    let colorpos = 0\r\n    let numConnected = 0\r\n\r\n    const bgColor = new THREE.Color(this.options.backgroundColor)\r\n    const color = new THREE.Color(this.options.color)\r\n    const diffColor = color.clone().sub(bgColor)\r\n\r\n    if (this.rayCaster) {\r\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX,this.rcMouseY), this.camera);\r\n    }\r\n\r\n    // # TEMPORARY RAY DRAWING\r\n    // pointA = @camera.position\r\n    // direction = @rayCaster.ray.direction\r\n    // direction.normalize()\r\n    // distance = 1000000 # at what distance to determine pointB\r\n    // pointB = new THREE.Vector3()\r\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\r\n    // geometry = new THREE.Geometry()\r\n    // geometry.vertices.push( pointA )\r\n    // geometry.vertices.push( pointB )\r\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\r\n    // line = new THREE.Line( geometry, material )\r\n    // @scene.add( line )\r\n\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      let dist, distToMouse\r\n      const p = this.points[i]\r\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\r\n\r\n      if (this.rayCaster) {\r\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position)\r\n      } else {\r\n        distToMouse = 1000\r\n      }\r\n      const distClamp = distToMouse.clamp(5,15)\r\n      p.scale.x = (p.scale.y = (p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100)))\r\n\r\n      if (p.r !== 0) {\r\n        let ang = Math.atan2( p.position.z, p.position.x )\r\n        dist = Math.sqrt( (p.position.z * p.position.z) + (p.position.x * p.position.x) )\r\n        ang += 0.00025 * p.r\r\n        p.position.x = dist * Math.cos(ang)\r\n        p.position.z = dist * Math.sin(ang)\r\n      }\r\n        // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\r\n        // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\r\n\r\n      for (let j = i; j < this.points.length; j++) {\r\n        const p2 = this.points[j]\r\n        const dx = p.position.x - p2.position.x\r\n        const dy = p.position.y - p2.position.y\r\n        const dz = p.position.z - p2.position.z\r\n        dist = Math.sqrt( (dx * dx) + (dy * dy) + (dz * dz) )\r\n        if (dist < this.options.maxDistance) {\r\n          let lineColor\r\n          const alpha = (( 1.0 - (dist / this.options.maxDistance) ) * 2).clamp(0, 1)\r\n          if (this.blending === 'additive') {\r\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n          } else {\r\n            lineColor = bgColor.clone().lerp(color, alpha)\r\n          }\r\n          // if @blending == 'subtractive'\r\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n\r\n          this.linePositions[ vertexpos++ ] = p.position.x\r\n          this.linePositions[ vertexpos++ ] = p.position.y\r\n          this.linePositions[ vertexpos++ ] = p.position.z\r\n          this.linePositions[ vertexpos++ ] = p2.position.x\r\n          this.linePositions[ vertexpos++ ] = p2.position.y\r\n          this.linePositions[ vertexpos++ ] = p2.position.z\r\n\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n\r\n          numConnected++\r\n        }\r\n      }\r\n    }\r\n    this.linesMesh.geometry.setDrawRange( 0, numConnected * 2 )\r\n    this.linesMesh.geometry.attributes.position.needsUpdate = true\r\n    this.linesMesh.geometry.attributes.color.needsUpdate = true\r\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\r\n\r\n    return this.t * 0.001\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera\r\n    if (!c.oy) {\r\n      c.oy = c.position.y\r\n      c.ox = c.position.x\r\n      c.oz = c.position.z\r\n    }\r\n    const ang = Math.atan2(c.oz, c.ox)\r\n    const dist = Math.sqrt((c.oz*c.oz) + (c.ox*c.ox))\r\n    const tAng = ang + ((x-0.5) * 2 * (this.options.mouseCoeffX || 1))\r\n    c.tz = dist * Math.sin(tAng)\r\n    c.tx = dist * Math.cos(tAng)\r\n    c.ty = c.oy + ((y-0.5) * 50 * (this.options.mouseCoeffY || 1))\r\n\r\n    if (!this.rayCaster) {\r\n      // this.rayCaster = new THREE.Raycaster()\r\n    }\r\n    this.rcMouseX = (x * 2) - 1\r\n    this.rcMouseY = (- x * 2) + 1\r\n  }\r\n\r\n  onRestart() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.points = []\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('NET', Effect)"],"names":["THREE","window","Effect","VantaBase","static","this","prototype","defaultOptions","color","backgroundColor","points","maxDistance","spacing","showDots","constructor","userOptions","super","genPoint","x","y","z","sphere","options","geometry","SphereGeometry","material","MeshLambertMaterial","Mesh","Object3D","cont","add","ox","oy","oz","position","set","r","rn","push","onInit","Group","scene","n","mobileCheck","numPoints","linePositions","Float32Array","lineColors","colorB","getBrightness","Color","bgB","blending","BufferGeometry","setAttribute","BufferAttribute","setUsage","DynamicDrawUsage","computeBoundingSphere","setDrawRange","LineBasicMaterial","vertexColors","VertexColors","AdditiveBlending","transparent","linesMesh","LineSegments","i","j","ri","camera","PerspectiveCamera","width","height","ambience","AmbientLight","spot","SpotLight","distance","target","onDestroy","remove","setOptions","forEach","p","onUpdate","diff","c","Math","abs","tx","ty","lookAt","Vector3","vertexpos","colorpos","numConnected","bgColor","diffColor","clone","sub","rayCaster","setFromCamera","Vector2","rcMouseX","rcMouseY","length","dist","distToMouse","ray","distanceToPoint","distClamp","clamp","scale","ang","atan2","sqrt","cos","sin","p2","dx","dy","dz","lineColor","alpha","lerp","g","b","attributes","needsUpdate","t","onMouseMove","tAng","mouseCoeffX","tz","mouseCoeffY","onRestart","initClass","vanta_net","VANTA","register"],"mappings":"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"}